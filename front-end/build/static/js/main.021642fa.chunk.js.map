{"version":3,"sources":["Components/DataTable.js","SatTable.js","index.js"],"names":["useRowStyles","makeStyles","root","borderBottom","tableIdCell","minWidth","maxWidth","textAlign","fontWeight","tableCell","fontSize","Row","data","row","classesRow","React","useState","open","setOpen","userLong","setUserLong","userLat","setUserLat","userAlt","orbitTime","orbitRowData","setOrbitRowData","Fragment","TableRow","hover","key","SatId","TableCell","className","IconButton","aria-label","size","onClick","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","console","log","axios","get","URLSearchParams","noradId","then","response","component","scope","SatName","PositionX","toFixed","PositionY","PositionZ","VelocityX","VelocityY","VelocityZ","style","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","Box","margin","Typography","variant","gutterBottom","Table","TableHead","tableHeader","TableBody","map","orbitDataRow","orbitTrackId","timestamp","satlatitude","satlongitude","sataltitude","elevation","SatTableComponents","props","handleChangePage","event","newPage","setState","page","handleChangeRowsPerPage","rowsPerPage","parseInt","target","value","handleVisualiseButtonPress","params","launchgroup","state","launchSelectValue","main","document","getElementById","removeChild","display","mainDiv","childElementCount","lastChild","mapDiv","newFrame","createElement","id","frameBorder","scrolling","marginheight","marginwidth","src","appendChild","launchGroupList","satTrackingData","btnState","handleChangeLaunchlist","bind","catch","error","this","rawData","sat","tableData","forEach","satRawRow","rowDataPosition","rowDataVelocity","push","toString","classes","FormControl","required","formControl","InputLabel","htmlFor","Select","name","onChange","MenuItem","item","index","FormHelperText","Button","disabled","button","color","TableContainer","Paper","tableContainerPaper","stickyHeader","table","slice","TablePagination","rowsPerPageOptions","count","length","onChangePage","onChangeRowsPerPage","Component","withStyles","theme","flexWrap","width","spacing","selectEmpty","marginTop","overflowX","createMuiTheme","palette","type","ThemeProvider","CssBaseline","ReactDOM","render"],"mappings":"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","file":"static/js/main.021642fa.chunk.js","sourcesContent":["// import React, { useState } from 'react';\n// import PropTypes from 'prop-types';\nimport React from 'react';\nimport axios from \"axios\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\n\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Collapse from '@material-ui/core/Collapse';// import Input from '@material-ui/core/Input';\n// import TableSortLabel from '@material-ui/core/TableSortLabel';\n// import Toolbar from '@material-ui/core/Toolbar';\n// import FormControlLabel from '@material-ui/core/FormControlLabel';\n// import Switch from '@material-ui/core/Switch';\n\n\n\nconst styles = theme => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        width: '100%',\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 150,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n    table: {\n        margin: \"5px\",\n        maxWidth: \"96.35vw\",\n        // maxHeight: \"inherit\",\n    },\n    button: {\n        margin: \"30px\",\n    },\n    tableContainerPaper: {\n        margin: \"20px 5px\",\n        maxWidth: \"98vw\",\n        overflowX: \"hidden\",\n        // maxHeight: 500,\n    },\n    tableHeader: {\n        minWidth: \"auto\",\n        maxWidth: 100,\n        textAlign: \"center\",\n        fontWeight: \"medium\",\n        fontSize: \"16px\",\n    }\n});\n\nconst useRowStyles = makeStyles({\n    root: {\n        '& > *': {\n            borderBottom: 'unset',\n        },\n    },\n    tableIdCell: {\n        minWidth: 50,\n        maxWidth: 100,\n        textAlign: \"center\",\n        fontWeight: \"medium\",\n    },\n    tableCell: {\n        minWidth: \"auto\",\n        maxWidth: 100,\n        textAlign: \"center\",\n        fontSize: 14,\n    },\n});\n\nfunction createData(SatId, SatName, PositionX, PositionY, PositionZ, VelocityX, VelocityY, VelocityZ) {\n    return { SatId, SatName, PositionX, PositionY, PositionZ, VelocityX, VelocityY, VelocityZ };\n}\n\n\n\nfunction Row(data) {\n    const { row } = data;\n    const classesRow = useRowStyles();\n    const [open, setOpen] = React.useState(false);\n    const [userLong, setUserLong] = React.useState(0);\n    const [userLat, setUserLat] = React.useState(0);\n    // const [userAlt, setUserAlt] = React.useState(0);\n    const [userAlt] = React.useState(0);\n    const [orbitTime] = React.useState(10);\n    const [orbitRowData, setOrbitRowData] = React.useState([])\n\n    \n    function rowCollapseClick() {\n\n        setOpen(!open);\n\n        if (!open) {\n            if (navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition((position) => {\n                    setUserLat(position.coords.latitude);\n                    setUserLong(position.coords.longitude);\n                });\n            } else { \n                console.log(\"Geolocation is not supported by this browser.\");\n            }\n            \n            axios.get(\"/satdata/pos?\" + new URLSearchParams({\n                noradId: row.SatId,\n                userLat : userLat,\n                userLong : userLong,\n                userAlt : userAlt,\n                orbitTime : orbitTime,\n            }))\n            .then((response) => {\n                console.log(response);\n                setOrbitRowData(response.data)\n            })\n        } \n    }\n\n    return (\n        <React.Fragment>\n        <TableRow hover key={row.SatId}>\n            <TableCell className={classesRow.tableCell}>\n                <IconButton \n                    aria-label=\"expand row\" \n                    size=\"small\" \n                    onClick={rowCollapseClick}\n                >\n                    {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                </IconButton>\n            </TableCell>\n            <TableCell component=\"th\" scope=\"row\" className={classesRow.tableIdCell}>\n                {row.SatId}\n            </TableCell>\n            <TableCell className={classesRow.tableCell}>{row.SatName}</TableCell>\n            <TableCell className={classesRow.tableCell}>{row.PositionX.toFixed(4)}</TableCell>\n            <TableCell className={classesRow.tableCell}>{row.PositionY.toFixed(4)}</TableCell>\n            <TableCell className={classesRow.tableCell}>{row.PositionZ.toFixed(4)}</TableCell>\n            <TableCell className={classesRow.tableCell}>{row.VelocityX.toFixed(4)}</TableCell>\n            <TableCell className={classesRow.tableCell}>{row.VelocityY.toFixed(4)}</TableCell>\n            <TableCell className={classesRow.tableCell}>{row.VelocityZ.toFixed(4)}</TableCell>\n        </TableRow>\n\n        <TableRow hover>\n            <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={9}>\n            <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                <Box margin={1}>\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">\n                        Orbit Tracking\n                    </Typography>\n                    <Table size=\"small\" aria-label=\"orbit-track-table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell className={classesRow.tableHeader} >Time Stamp</TableCell>\n                                <TableCell className={classesRow.tableHeader} >Latitude</TableCell>\n                                <TableCell className={classesRow.tableHeader} >Longitude</TableCell>\n                                <TableCell className={classesRow.tableHeader} >Altitude</TableCell>\n                                <TableCell className={classesRow.tableHeader} >Elevation</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {orbitRowData.map((orbitDataRow) => (\n                                <TableRow key={orbitDataRow.orbitTrackId}>\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        {orbitDataRow.timestamp}\n                                    </TableCell>\n                                    <TableCell>{orbitDataRow.satlatitude}</TableCell>\n                                    <TableCell>{orbitDataRow.satlongitude}</TableCell>\n                                    <TableCell>{orbitDataRow.sataltitude}</TableCell>\n                                    <TableCell>{orbitDataRow.elevation}</TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </Box>\n            </Collapse>\n            </TableCell>\n        </TableRow>    \n        </React.Fragment>\n    );\n}\n\nclass SatTableComponents extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            launchGroupList: [],\n            launchSelectValue: '',\n            satTrackingData: [],\n            rowsPerPage: 5,\n            page: 0,\n            btnState: true,\n        };\n\n        this.handleChangeLaunchlist = this.handleChangeLaunchlist.bind(this);  \n        this.handleChangePage = this.handleChangePage.bind(this);\n        this.handleChangeRowsPerPage = this.handleChangeRowsPerPage.bind(this);\n        this.handleVisualiseButtonPress = this.handleVisualiseButtonPress.bind(this);\n    }\n\n    componentDidMount() {\n        axios.get(\"/frontend/launchlist\")\n        .then(response => {\n            // console.log(response.data);\n            this.setState({\n                launchGroupList: response.data\n            });\n        })\n        .catch(function (error) {\n            console.log(error);\n        });\n    }\n    \n    handleChangeLaunchlist(event) {\n        // console.log(this.state.launchGroupList[e.target.value])\n        axios.get(\"/satdata/tle?\", {\n            params: {\n                launchgroup: this.state.launchGroupList[event.target.value],\n            }\n        })\n        .then((response) => {                \n            // console.log(response.data.sat); // Outputs satJson to browser console\n            \n            let rawData = response.data.sat;\n            let tableData = [];\n            \n            \n            rawData.forEach((satRawRow) => {\n                let rowDataPosition = satRawRow.tableData[\"position\"];\n                let rowDataVelocity = satRawRow.tableData[\"velocity\"];\n                tableData.push(createData(satRawRow[\"id\"], satRawRow[\"satName\"], rowDataPosition[\"x\"], rowDataPosition[\"y\"], rowDataPosition[\"z\"], rowDataVelocity[\"x\"], rowDataVelocity[\"y\"], rowDataVelocity[\"z\"]));\n            })\n\n            if (response.data.sat) {\n                console.log(event.target.value);\n                console.log(this.state.launchGroupList);\n                this.setState({\n                    btnState: false,\n                    satTrackingData: tableData,\n                    launchSelectValue: (this.state.launchGroupList[event.target.value]).toString(),\n                });\n            }\n            // console.log(this.state.launchSelectValue);\n        })\n        .catch(function (error) {\n            console.log(error);\n        });\n    };\n\n    handleChangePage = (event, newPage) => {\n        this.setState({page: newPage})\n    };\n    \n    handleChangeRowsPerPage = (event) => {\n        this.setState({\n            page: 0,\n            rowsPerPage: parseInt(event.target.value, 10),\n        })\n    };\n\n    handleVisualiseButtonPress = (event) => {\n        axios.get(\"/satdata/tle?\", {\n            params: {\n                launchgroup: this.state.launchSelectValue,\n            }\n        })\n        .then((response) => {\n            let main = document.getElementById(\"main\");\n            if (document.getElementById(\"sideBarDiv\")) {\n                main.removeChild(document.getElementById(\"sideBarDiv\"));\n            }\n        \n            if (document.getElementById(\"root\").style.display !== \"none\") {\n                document.getElementById(\"root\").style.display =\"none\"\n            }\n        \n            let mainDiv = document.getElementById(\"mainDiv\");\n            while (mainDiv.childElementCount !== 0) {\n                mainDiv.removeChild(mainDiv.lastChild);\n            }\n        \n            let mapDiv = document.getElementById(\"mapDiv\");\n            while (mapDiv.childElementCount !== 0) {\n                mapDiv.removeChild(mapDiv.lastChild);\n            }\n        \n            // addSideBar();\n            // toggleSideBar()\n        \n            let newFrame = document.createElement(\"iframe\");\n            newFrame.id = \"iframeMap\";\n            newFrame.frameBorder=\"0\";\n            newFrame.scrolling=\"no\";\n            newFrame.marginheight=\"0\";\n            newFrame.marginwidth=\"0\";\n            newFrame.src=\"maps.html\";\n            mapDiv.appendChild(newFrame);\n        })\n    };\n\n    render () {\n        const { classes } = this.props;\n        const { satTrackingData, page, rowsPerPage, btnState, launchSelectValue } = this.state;\n        // const emptyRows = rowsPerPage - Math.min(rowsPerPage, satTrackingData.length - page * rowsPerPage);\n\n        console.log(launchSelectValue);\n\n        return (\n            <div>\n                <div>\n                    <FormControl required className={classes.formControl}>\n                        <InputLabel htmlFor=\"launch-group-dropdown\">Launch Group</InputLabel>\n                        <Select\n                            id='launch-group-dropdown'\n                            name='launch-group-dropdown'  \n                            value=''                          \n                            // value={launchSelectValue}\n                            onChange={this.handleChangeLaunchlist}\n                        >\n                            {/* <MenuItem key='1' value=\"1\"></MenuItem>\n                            <MenuItem key='2' value=\"2\"></MenuItem>\n                            <MenuItem key='3' value=\"3\"></MenuItem> */}\n                            \n                            <MenuItem key='header' value=\"\"></MenuItem>\n                            {this.state.launchGroupList.map((item, index) => \n                                <MenuItem key={index} value={index}>{item}</MenuItem>\n                            )};\n                        </Select>\n                        <FormHelperText>Required</FormHelperText>\n                    </FormControl>\n\n                    <Button \n                        disabled={btnState}\n                        variant=\"contained\" \n                        id=\"visualiseButton\"\n                        className={classes.button} \n                        color=\"default\"\n                        onClick={this.handleVisualiseButtonPress}\n                    >\n                        Visualize Satellite Positions\n                    </Button>\n                </div>\n\n                <div>\n                    <TableContainer component={Paper} className={classes.tableContainerPaper}>\n                        {/* <div>{launchSelectValue}</div> */}\n                        <Table \n                            stickyHeader\n                            className={classes.table} \n                            size=\"small\" \n                            aria-label=\"a dense table\"\n                        >\n                        <TableHead>\n                            <TableRow>\n                                <TableCell className={classes.tableHeader}/>\n                                <TableCell className={classes.tableHeader}>Satellite&nbsp;ID</TableCell>\n                                <TableCell className={classes.tableHeader} >Sat&nbsp;Name</TableCell>\n                                <TableCell className={classes.tableHeader} >Position&nbsp;(X)</TableCell>\n                                <TableCell className={classes.tableHeader} >Position&nbsp;(X)</TableCell>\n                                <TableCell className={classes.tableHeader} >Position&nbsp;(X)</TableCell>\n                                <TableCell className={classes.tableHeader} >Velocity&nbsp;(X)</TableCell>\n                                <TableCell className={classes.tableHeader} >Velocity&nbsp;(X)</TableCell>\n                                <TableCell className={classes.tableHeader} >Velocity&nbsp;(X)</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {satTrackingData.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => (\n                                <Row key={row.name} row={row} />\n                           ))}\n                        </TableBody>\n                        </Table>\n                        <TablePagination\n                            rowsPerPageOptions={[5, 10, 25, 50]}\n                            component=\"div\"\n                            count={satTrackingData.length}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            onChangePage={this.handleChangePage}\n                            onChangeRowsPerPage={this.handleChangeRowsPerPage}\n                        />\n                    </TableContainer>\n                </div>\n\n            </div>\n        );\n    }\n};\n\n// SatTableComponents.propTypes = {\n//     classes: PropTypes.object.isRequired,\n//   };\n\nexport default withStyles(styles)(SatTableComponents)\n","import React from \"react\"\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n// import TemporaryDrawer from \"./Components/Drawer\"\nimport SatTableComponents from './Components/DataTable';\n\nconst theme = createMuiTheme({\n    palette: {\n        type: \"dark\",\n    },\n});\n\nfunction Table() {\n    return (\n        <ThemeProvider theme={theme}>\n            <React.Fragment>\n                <CssBaseline />\n                {/* <TemporaryDrawer /> */}\n                <SatTableComponents />\n            </React.Fragment>\n        </ThemeProvider>\n    )\n}\n\nexport default Table","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Table from './SatTable';\n// import MainButtons from './Components/MainButtons'\n\nReactDOM.render(\n  <Table />,\n  document.getElementById('root')\n);\n\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <Table />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <MainButtons />\n//   </React.StrictMode>,\n//   document.getElementById('material-buttons')\n// );\n\n"],"sourceRoot":""}